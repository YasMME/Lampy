
#include <pins_arduino.h>
#include <SPI.h>
#include <Adafruit_BLE_Firmata.h>
#include "Adafruit_BLE_UART.h"

// Connect CLK/MISO/MOSI to hardware SPI
// e.g. On UNO & compatible: CLK = 13, MISO = 12, MOSI = 11
#define ADAFRUITBLE_REQ 10
#define ADAFRUITBLE_RDY 2     // This should be an interrupt pin, on Uno thats #2 or #3
#define ADAFRUITBLE_RST 9

// Change this to whatever is the Serial console you want, either Serial or SerialUSB
#define FIRMATADEBUG    Serial
// Pause for Serial console before beginning?
#define WAITFORSERIAL   true
// Print all BLE interactions?
#define VERBOSE_MODE    false
// Pullups on all input pins?
#define AUTO_INPUT_PULLUPS false

Adafruit_BLE_UART BTLEserial = Adafruit_BLE_UART(ADAFRUITBLE_REQ, ADAFRUITBLE_RDY, ADAFRUITBLE_RST);


/*==============================================================================
 * GLOBAL VARIABLES
 *============================================================================*/

// Used for generating interrupts using CLK signal
const int PinA = 22;
// Used for reading DT signal
const int PinB = 21;
//Used for reading push button
const int Pin_button = 23;

// Keep track of last rotary value
int lastCount = 50;
// Updated by the ISR (Interrupt Service Routine)
volatile int virtualPosition = 150;

//LEDs
const int LEDPin_main = 20;
const int FanPin = 19;
const int alternative_switch_1 = 18;
const int alternative_switch_2 = 17;

int push_count = 0;

//Dimming Value
int faded_count = 5;
boolean AUTO_Dim = false;
int second_position;
int serial_input = 80;
int switch_button = 0;
int case_switch = 0;


// ------------------------------------------------------------------
// INTERRUPT     INTERRUPT     INTERRUPT     INTERRUPT     INTERRUPT
// ------------------------------------------------------------------
void isrA ()  {
  static unsigned long lastInterruptTime = 0;
  unsigned long interruptTime = millis();

  // If interrupts come faster than 5ms, assume it's a bounce and ignore
  if (interruptTime - lastInterruptTime > 5) {

    byte pinB = digitalRead(PinB);
    if (pinB == 1)
    {
      virtualPosition++ ; // Could be -5 or -10
    }
    else {
      virtualPosition-- ; // Could be +5 or +10
    }

    // Restrict value from 0 to +100
    virtualPosition = min(200, max(0, virtualPosition));
  }

  // Keep track of when we were here last (no more than every 5ms)
  lastInterruptTime = interruptTime;
}

void isrB ()  {
  static unsigned long lastInterruptTime = 0;
  unsigned long interruptTime = millis();

  // If interrupts come faster than 5ms, assume it's a bounce and ignore
  if (interruptTime - lastInterruptTime > 5) {

    byte pinA = digitalRead(PinA);
    if (pinA == 0)
    {
      virtualPosition++ ; // Could be -5 or -10
    }
    else{
      virtualPosition-- ; // Could be +5 or +10
    }

    // Restrict value from 0 to +100
    virtualPosition = min(200, max(0, virtualPosition));
  }
  // Keep track of when we were here last (no more than every 5ms)
  lastInterruptTime = interruptTime;
}

// ------------------------------------------------------------------
// SETUP    SETUP    SETUP    SETUP    SETUP    SETUP    SETUP
// ------------------------------------------------------------------
void setup() {
  Serial.begin(9600);
  //BTLEserial.setDeviceName("LIGHT PANEL"); /* 7 characters max! */

  BTLEserial.begin();
  
  // Rotary pulses are INPUTs
  pinMode(PinA, INPUT_PULLUP);
  pinMode(PinB, INPUT_PULLUP);
  pinMode(Pin_button, INPUT_PULLUP);
  pinMode(LEDPin_main, OUTPUT);
  pinMode(FanPin, OUTPUT);
  pinMode(alternative_switch_1, INPUT);
  pinMode(alternative_switch_2, INPUT);

  // Attach the routine to service the interrupts
  attachInterrupt(PinA, isrA, LOW);
  attachInterrupt(PinB, isrB, LOW);
}
aci_evt_opcode_t laststatus = ACI_EVT_DISCONNECTED;

// ------------------------------------------------------------------
// MAIN LOOP     MAIN LOOP     MAIN LOOP     MAIN LOOP     MAIN LOOP
// ------------------------------------------------------------------
void loop() {
  // Tell the nRF8001 to do whatever it should be working on.
  BTLEserial.pollACI();

  // Ask what is our current status
  aci_evt_opcode_t status = BTLEserial.getState();
  
  if (status != laststatus) {
    // print it out!
    if (status == ACI_EVT_DEVICE_STARTED) {
        Serial.println(F("* Advertising started"));
    }
    if (status == ACI_EVT_CONNECTED) {
        Serial.println(F("* Connected!"));
    }
    if (status == ACI_EVT_DISCONNECTED) {
        Serial.println(F("* Disconnected or advertising timed out"));
    }
    // OK set the last status change to this one
    laststatus = status;
  }
 
  if (status == ACI_EVT_CONNECTED) {
    // OK while we still have something to read, get a character and print it out
    while (BTLEserial.available()) {
      serial_input = BTLEserial.read();
    }
  }
  
  int read_1 = digitalRead(alternative_switch_1);
  int read_2 = digitalRead(alternative_switch_2);
  if (read_1 == 1){
    switch_button = 1;
  }
  else if (read_2 == 1){
    switch_button = 2;
  }
  else{
    switch_button = 0;
  }
  switch (switch_button){
      case 1:
       analogWrite(LEDPin_main, 250);
       digitalWrite(FanPin, HIGH);
       break;
      case 2:
       analogWrite(LEDPin_main, 0);
       digitalWrite(FanPin, LOW);
       break;
      default:
        switch (serial_input){
          case 77:
            //Begins to brighten up
           digitalWrite(FanPin, HIGH);
           if (virtualPosition < 200){
              virtualPosition = virtualPosition + faded_count;
              analogWrite(LEDPin_main, virtualPosition);
              delay(300);
           }
            break;
          case 78:
           //Dims the LEDs after it reachs its max and it recieves the signal
           virtualPosition = 200;
           for (int dim_count = virtualPosition; dim_count >= 10; dim_count -= faded_count){
              analogWrite(LEDPin_main, dim_count);
              delay(100);
           }
           if (second_position == 0){
             //Set to default case
             serial_input = 80;
             virtualPosition = second_position;
           }
           digitalWrite(FanPin, LOW);
           break;
          case 79:
          //Evening control
          case 10:
           digitalWrite(FanPin, HIGH);
           //virtualPosition = 200;
           if (virtualPosition != lastCount) {
             lastCount = virtualPosition ;
           }
           analogWrite(LEDPin_main, virtualPosition);
          break;
          /*
          case 79:
            case_switch = 1;
            switch (case_switch){
              case 1:
                if (virtualPosition < 200){
                  virtualPosition = virtualPosition + faded_count;
                  analogWrite(LEDPin_main, virtualPosition);
                  delay(300);
                }
                
                case_switch = 2;
                break;
              case 2:
                if (virtualPosition != lastCount) {
                  lastCount = virtualPosition ;
                }
                else{
                  case_switch = 3;
                }
                analogWrite(LEDPin_main, virtualPosition);
                break;
              case 3:
                //virtualPosition = 150;
                for (int dim_count = virtualPosition; dim_count >= 10; dim_count -= faded_count){
                    analogWrite(LEDPin_main, dim_count);
                    delay(100);
                 }
                  if (second_position == 0){
                      case_switch = 0;
                      virtualPosition = second_position;
                    }
                //case_switch = 0;
                break;
                default:
                  virtualPosition = 0;
                  serial_input = 80;
           }
           */
          default:
            if (digitalRead(Pin_button) == LOW){
               virtualPosition = 10;
               delay(300);
               push_count = push_count + 1;
            }
            if ((push_count % 2) == 0){
              virtualPosition = 0;
              push_count = 0;
            }
            // If the current rotary switch position has changed then update everything
            //Plan on deleteing this, just a display note
            //---------------------------------//
            if (virtualPosition != lastCount) {
              lastCount = virtualPosition ;
            }
            analogWrite(LEDPin_main, virtualPosition);
            if (virtualPosition > 0){
              digitalWrite(FanPin, HIGH);
            }
            else{
              digitalWrite(FanPin, LOW);
            }
        }
  }
}
